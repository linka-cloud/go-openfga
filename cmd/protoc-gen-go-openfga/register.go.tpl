{{- /*gotype: github.com/lyft/protoc-gen-star.File*/ -}}
{{ comment .SyntaxSourceCodeInfo.LeadingComments }}
{{ range .SyntaxSourceCodeInfo.LeadingDetachedComments }}
{{ comment . }}
{{ end }}
// Code generated by protoc-gen-go-openfga. DO NOT EDIT.
package {{ package . }}

import (
  "context"

  "google.golang.org/grpc/codes"
  "google.golang.org/grpc/status"

  fgainterceptors "go.linka.cloud/go-openfga/interceptors"
)

var (
	_ = codes.OK
	_ = status.New
)

{{ range .Services }}
{{ $service := . }}
{{ with (module .) }}
var {{ $service.Name }}Roles = struct {
 	{{- range .Extends }}
 	{{- $name := .Name }}
	{{- with .Relations }}
	{{ upperCamelCase $name }} struct {
 		{{- range . }}
		{{ upperCamelCase .Name }} string
		{{- end }}
	}
	{{- end }}
 	{{- end }}
	{{- range .Types }}
	{{- $name := .Name }}
	{{- with .Relations }}
	{{ upperCamelCase $name }} struct {
		{{- range . }}
		{{ upperCamelCase .Name }} string
		{{- end }}
	}
	{{- end }}
	{{- end }}
 }{
	{{- range .Extends }}
	{{- $name := .Name }}
	{{- with .Relations }}
	{{ upperCamelCase $name }}: struct {
		{{- range . }}
	 	{{ upperCamelCase .Name }} string
		{{- end }}
	 }{
	{{- range . }}
	 	{{ upperCamelCase .Name }}: "{{ .Name }}",
	{{- end }}
	},
	{{- end }}
	{{- end }}
	{{- range .Types }}
	{{- $name := .Name }}
	{{- with .Relations }}
	{{ upperCamelCase $name }}: struct {
		{{- range . }}
		 {{ upperCamelCase .Name }} string
		{{- end }}
	}{
	{{- range . }}
	 	{{ upperCamelCase .Name }}: "{{ .Name }}",
	{{- end }}
	},
	{{- end }}
	{{- end }}
}
{{ end }}

func Register{{ .Name }}FGA(fga fgainterceptors.FGA) {
	{{- range .Methods }}
	  {{- $method := . }}
	  {{- with access . }}
	  fga.Register({{ $service.Name }}_{{ $method.Name }}_FullMethodName, func(ctx context.Context, req any) (object string, relation string, err error) {
			{{- if (need_getter .) }}
			r, ok := req.(*{{ name $method.Input }})
			if !ok {
				panic("unexpected request type: expected {{ name $method.Input }}")
			}
			id := r.{{ getter . $method }}()
			if id == "" {
				return "", "", status.Error(codes.InvalidArgument, "{{ field . }} is required")
			}
			return "{{ .Type }}:" + id, "{{ .Relation }}", nil
			{{- else }}
			return "{{ object . }}", "{{ .Relation }}", nil
			{{- end }}
    })
	  {{- end }}
	{{- end }}
}
{{ end }}
