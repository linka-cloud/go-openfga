// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: x/pb/v1/service.proto

package pbv1

import (
	v1 "github.com/openfga/api/proto/openfga/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadOnly bool `protobuf:"varint,1,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	// Types that are assignable to Request:
	//
	//	*TxRequest_Read
	//	*TxRequest_Write
	//	*TxRequest_Check
	//	*TxRequest_BatchCheck
	//	*TxRequest_Expand
	//	*TxRequest_ReadAuthorizationModels
	//	*TxRequest_ReadAuthorizationModel
	//	*TxRequest_WriteAuthorizationModel
	//	*TxRequest_WriteAssertions
	//	*TxRequest_ReadAssertions
	//	*TxRequest_ReadChanges
	//	*TxRequest_CreateStore
	//	*TxRequest_UpdateStore
	//	*TxRequest_DeleteStore
	//	*TxRequest_GetStore
	//	*TxRequest_ListStores
	//	*TxRequest_ListObjects
	//	*TxRequest_ListUsers
	//	*TxRequest_Commit
	Request isTxRequest_Request `protobuf_oneof:"request"`
}

func (x *TxRequest) Reset() {
	*x = TxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x_pb_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRequest) ProtoMessage() {}

func (x *TxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_x_pb_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRequest.ProtoReflect.Descriptor instead.
func (*TxRequest) Descriptor() ([]byte, []int) {
	return file_x_pb_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *TxRequest) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (m *TxRequest) GetRequest() isTxRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *TxRequest) GetRead() *v1.ReadRequest {
	if x, ok := x.GetRequest().(*TxRequest_Read); ok {
		return x.Read
	}
	return nil
}

func (x *TxRequest) GetWrite() *v1.WriteRequest {
	if x, ok := x.GetRequest().(*TxRequest_Write); ok {
		return x.Write
	}
	return nil
}

func (x *TxRequest) GetCheck() *v1.CheckRequest {
	if x, ok := x.GetRequest().(*TxRequest_Check); ok {
		return x.Check
	}
	return nil
}

func (x *TxRequest) GetBatchCheck() *v1.BatchCheckRequest {
	if x, ok := x.GetRequest().(*TxRequest_BatchCheck); ok {
		return x.BatchCheck
	}
	return nil
}

func (x *TxRequest) GetExpand() *v1.ExpandRequest {
	if x, ok := x.GetRequest().(*TxRequest_Expand); ok {
		return x.Expand
	}
	return nil
}

func (x *TxRequest) GetReadAuthorizationModels() *v1.ReadAuthorizationModelsRequest {
	if x, ok := x.GetRequest().(*TxRequest_ReadAuthorizationModels); ok {
		return x.ReadAuthorizationModels
	}
	return nil
}

func (x *TxRequest) GetReadAuthorizationModel() *v1.ReadAuthorizationModelRequest {
	if x, ok := x.GetRequest().(*TxRequest_ReadAuthorizationModel); ok {
		return x.ReadAuthorizationModel
	}
	return nil
}

func (x *TxRequest) GetWriteAuthorizationModel() *v1.WriteAuthorizationModelRequest {
	if x, ok := x.GetRequest().(*TxRequest_WriteAuthorizationModel); ok {
		return x.WriteAuthorizationModel
	}
	return nil
}

func (x *TxRequest) GetWriteAssertions() *v1.WriteAssertionsRequest {
	if x, ok := x.GetRequest().(*TxRequest_WriteAssertions); ok {
		return x.WriteAssertions
	}
	return nil
}

func (x *TxRequest) GetReadAssertions() *v1.ReadAssertionsRequest {
	if x, ok := x.GetRequest().(*TxRequest_ReadAssertions); ok {
		return x.ReadAssertions
	}
	return nil
}

func (x *TxRequest) GetReadChanges() *v1.ReadChangesRequest {
	if x, ok := x.GetRequest().(*TxRequest_ReadChanges); ok {
		return x.ReadChanges
	}
	return nil
}

func (x *TxRequest) GetCreateStore() *v1.CreateStoreRequest {
	if x, ok := x.GetRequest().(*TxRequest_CreateStore); ok {
		return x.CreateStore
	}
	return nil
}

func (x *TxRequest) GetUpdateStore() *v1.UpdateStoreRequest {
	if x, ok := x.GetRequest().(*TxRequest_UpdateStore); ok {
		return x.UpdateStore
	}
	return nil
}

func (x *TxRequest) GetDeleteStore() *v1.DeleteStoreRequest {
	if x, ok := x.GetRequest().(*TxRequest_DeleteStore); ok {
		return x.DeleteStore
	}
	return nil
}

func (x *TxRequest) GetGetStore() *v1.GetStoreRequest {
	if x, ok := x.GetRequest().(*TxRequest_GetStore); ok {
		return x.GetStore
	}
	return nil
}

func (x *TxRequest) GetListStores() *v1.ListStoresRequest {
	if x, ok := x.GetRequest().(*TxRequest_ListStores); ok {
		return x.ListStores
	}
	return nil
}

func (x *TxRequest) GetListObjects() *v1.ListObjectsRequest {
	if x, ok := x.GetRequest().(*TxRequest_ListObjects); ok {
		return x.ListObjects
	}
	return nil
}

func (x *TxRequest) GetListUsers() *v1.ListUsersRequest {
	if x, ok := x.GetRequest().(*TxRequest_ListUsers); ok {
		return x.ListUsers
	}
	return nil
}

func (x *TxRequest) GetCommit() *CommitRequest {
	if x, ok := x.GetRequest().(*TxRequest_Commit); ok {
		return x.Commit
	}
	return nil
}

type isTxRequest_Request interface {
	isTxRequest_Request()
}

type TxRequest_Read struct {
	Read *v1.ReadRequest `protobuf:"bytes,2,opt,name=read,proto3,oneof"`
}

type TxRequest_Write struct {
	Write *v1.WriteRequest `protobuf:"bytes,3,opt,name=write,proto3,oneof"`
}

type TxRequest_Check struct {
	Check *v1.CheckRequest `protobuf:"bytes,4,opt,name=check,proto3,oneof"`
}

type TxRequest_BatchCheck struct {
	BatchCheck *v1.BatchCheckRequest `protobuf:"bytes,5,opt,name=batch_check,json=batchCheck,proto3,oneof"`
}

type TxRequest_Expand struct {
	Expand *v1.ExpandRequest `protobuf:"bytes,6,opt,name=expand,proto3,oneof"`
}

type TxRequest_ReadAuthorizationModels struct {
	ReadAuthorizationModels *v1.ReadAuthorizationModelsRequest `protobuf:"bytes,7,opt,name=read_authorization_models,json=readAuthorizationModels,proto3,oneof"`
}

type TxRequest_ReadAuthorizationModel struct {
	ReadAuthorizationModel *v1.ReadAuthorizationModelRequest `protobuf:"bytes,8,opt,name=read_authorization_model,json=readAuthorizationModel,proto3,oneof"`
}

type TxRequest_WriteAuthorizationModel struct {
	WriteAuthorizationModel *v1.WriteAuthorizationModelRequest `protobuf:"bytes,9,opt,name=write_authorization_model,json=writeAuthorizationModel,proto3,oneof"`
}

type TxRequest_WriteAssertions struct {
	WriteAssertions *v1.WriteAssertionsRequest `protobuf:"bytes,10,opt,name=write_assertions,json=writeAssertions,proto3,oneof"`
}

type TxRequest_ReadAssertions struct {
	ReadAssertions *v1.ReadAssertionsRequest `protobuf:"bytes,11,opt,name=read_assertions,json=readAssertions,proto3,oneof"`
}

type TxRequest_ReadChanges struct {
	ReadChanges *v1.ReadChangesRequest `protobuf:"bytes,12,opt,name=read_changes,json=readChanges,proto3,oneof"`
}

type TxRequest_CreateStore struct {
	CreateStore *v1.CreateStoreRequest `protobuf:"bytes,13,opt,name=create_store,json=createStore,proto3,oneof"`
}

type TxRequest_UpdateStore struct {
	UpdateStore *v1.UpdateStoreRequest `protobuf:"bytes,14,opt,name=update_store,json=updateStore,proto3,oneof"`
}

type TxRequest_DeleteStore struct {
	DeleteStore *v1.DeleteStoreRequest `protobuf:"bytes,15,opt,name=delete_store,json=deleteStore,proto3,oneof"`
}

type TxRequest_GetStore struct {
	GetStore *v1.GetStoreRequest `protobuf:"bytes,16,opt,name=get_store,json=getStore,proto3,oneof"`
}

type TxRequest_ListStores struct {
	ListStores *v1.ListStoresRequest `protobuf:"bytes,17,opt,name=list_stores,json=listStores,proto3,oneof"`
}

type TxRequest_ListObjects struct {
	ListObjects *v1.ListObjectsRequest `protobuf:"bytes,18,opt,name=list_objects,json=listObjects,proto3,oneof"`
}

type TxRequest_ListUsers struct {
	ListUsers *v1.ListUsersRequest `protobuf:"bytes,19,opt,name=list_users,json=listUsers,proto3,oneof"`
}

type TxRequest_Commit struct {
	Commit *CommitRequest `protobuf:"bytes,20,opt,name=commit,proto3,oneof"`
}

func (*TxRequest_Read) isTxRequest_Request() {}

func (*TxRequest_Write) isTxRequest_Request() {}

func (*TxRequest_Check) isTxRequest_Request() {}

func (*TxRequest_BatchCheck) isTxRequest_Request() {}

func (*TxRequest_Expand) isTxRequest_Request() {}

func (*TxRequest_ReadAuthorizationModels) isTxRequest_Request() {}

func (*TxRequest_ReadAuthorizationModel) isTxRequest_Request() {}

func (*TxRequest_WriteAuthorizationModel) isTxRequest_Request() {}

func (*TxRequest_WriteAssertions) isTxRequest_Request() {}

func (*TxRequest_ReadAssertions) isTxRequest_Request() {}

func (*TxRequest_ReadChanges) isTxRequest_Request() {}

func (*TxRequest_CreateStore) isTxRequest_Request() {}

func (*TxRequest_UpdateStore) isTxRequest_Request() {}

func (*TxRequest_DeleteStore) isTxRequest_Request() {}

func (*TxRequest_GetStore) isTxRequest_Request() {}

func (*TxRequest_ListStores) isTxRequest_Request() {}

func (*TxRequest_ListObjects) isTxRequest_Request() {}

func (*TxRequest_ListUsers) isTxRequest_Request() {}

func (*TxRequest_Commit) isTxRequest_Request() {}

type TxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*TxResponse_Read
	//	*TxResponse_Write
	//	*TxResponse_Check
	//	*TxResponse_BatchCheck
	//	*TxResponse_Expand
	//	*TxResponse_ReadAuthorizationModels
	//	*TxResponse_ReadAuthorizationModel
	//	*TxResponse_WriteAuthorizationModel
	//	*TxResponse_WriteAssertions
	//	*TxResponse_ReadAssertions
	//	*TxResponse_ReadChanges
	//	*TxResponse_CreateStore
	//	*TxResponse_UpdateStore
	//	*TxResponse_DeleteStore
	//	*TxResponse_GetStore
	//	*TxResponse_ListStores
	//	*TxResponse_ListObjects
	//	*TxResponse_ListUsers
	//	*TxResponse_Commit
	Response isTxResponse_Response `protobuf_oneof:"response"`
}

func (x *TxResponse) Reset() {
	*x = TxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x_pb_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxResponse) ProtoMessage() {}

func (x *TxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_x_pb_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxResponse.ProtoReflect.Descriptor instead.
func (*TxResponse) Descriptor() ([]byte, []int) {
	return file_x_pb_v1_service_proto_rawDescGZIP(), []int{1}
}

func (m *TxResponse) GetResponse() isTxResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *TxResponse) GetRead() *v1.ReadResponse {
	if x, ok := x.GetResponse().(*TxResponse_Read); ok {
		return x.Read
	}
	return nil
}

func (x *TxResponse) GetWrite() *v1.WriteResponse {
	if x, ok := x.GetResponse().(*TxResponse_Write); ok {
		return x.Write
	}
	return nil
}

func (x *TxResponse) GetCheck() *v1.CheckResponse {
	if x, ok := x.GetResponse().(*TxResponse_Check); ok {
		return x.Check
	}
	return nil
}

func (x *TxResponse) GetBatchCheck() *v1.BatchCheckResponse {
	if x, ok := x.GetResponse().(*TxResponse_BatchCheck); ok {
		return x.BatchCheck
	}
	return nil
}

func (x *TxResponse) GetExpand() *v1.ExpandResponse {
	if x, ok := x.GetResponse().(*TxResponse_Expand); ok {
		return x.Expand
	}
	return nil
}

func (x *TxResponse) GetReadAuthorizationModels() *v1.ReadAuthorizationModelsResponse {
	if x, ok := x.GetResponse().(*TxResponse_ReadAuthorizationModels); ok {
		return x.ReadAuthorizationModels
	}
	return nil
}

func (x *TxResponse) GetReadAuthorizationModel() *v1.ReadAuthorizationModelResponse {
	if x, ok := x.GetResponse().(*TxResponse_ReadAuthorizationModel); ok {
		return x.ReadAuthorizationModel
	}
	return nil
}

func (x *TxResponse) GetWriteAuthorizationModel() *v1.WriteAuthorizationModelResponse {
	if x, ok := x.GetResponse().(*TxResponse_WriteAuthorizationModel); ok {
		return x.WriteAuthorizationModel
	}
	return nil
}

func (x *TxResponse) GetWriteAssertions() *v1.WriteAssertionsResponse {
	if x, ok := x.GetResponse().(*TxResponse_WriteAssertions); ok {
		return x.WriteAssertions
	}
	return nil
}

func (x *TxResponse) GetReadAssertions() *v1.ReadAssertionsResponse {
	if x, ok := x.GetResponse().(*TxResponse_ReadAssertions); ok {
		return x.ReadAssertions
	}
	return nil
}

func (x *TxResponse) GetReadChanges() *v1.ReadChangesResponse {
	if x, ok := x.GetResponse().(*TxResponse_ReadChanges); ok {
		return x.ReadChanges
	}
	return nil
}

func (x *TxResponse) GetCreateStore() *v1.CreateStoreResponse {
	if x, ok := x.GetResponse().(*TxResponse_CreateStore); ok {
		return x.CreateStore
	}
	return nil
}

func (x *TxResponse) GetUpdateStore() *v1.UpdateStoreResponse {
	if x, ok := x.GetResponse().(*TxResponse_UpdateStore); ok {
		return x.UpdateStore
	}
	return nil
}

func (x *TxResponse) GetDeleteStore() *v1.DeleteStoreResponse {
	if x, ok := x.GetResponse().(*TxResponse_DeleteStore); ok {
		return x.DeleteStore
	}
	return nil
}

func (x *TxResponse) GetGetStore() *v1.GetStoreResponse {
	if x, ok := x.GetResponse().(*TxResponse_GetStore); ok {
		return x.GetStore
	}
	return nil
}

func (x *TxResponse) GetListStores() *v1.ListStoresResponse {
	if x, ok := x.GetResponse().(*TxResponse_ListStores); ok {
		return x.ListStores
	}
	return nil
}

func (x *TxResponse) GetListObjects() *v1.ListObjectsResponse {
	if x, ok := x.GetResponse().(*TxResponse_ListObjects); ok {
		return x.ListObjects
	}
	return nil
}

func (x *TxResponse) GetListUsers() *v1.ListUsersResponse {
	if x, ok := x.GetResponse().(*TxResponse_ListUsers); ok {
		return x.ListUsers
	}
	return nil
}

func (x *TxResponse) GetCommit() *CommitResponse {
	if x, ok := x.GetResponse().(*TxResponse_Commit); ok {
		return x.Commit
	}
	return nil
}

type isTxResponse_Response interface {
	isTxResponse_Response()
}

type TxResponse_Read struct {
	Read *v1.ReadResponse `protobuf:"bytes,1,opt,name=read,proto3,oneof"`
}

type TxResponse_Write struct {
	Write *v1.WriteResponse `protobuf:"bytes,2,opt,name=write,proto3,oneof"`
}

type TxResponse_Check struct {
	Check *v1.CheckResponse `protobuf:"bytes,3,opt,name=check,proto3,oneof"`
}

type TxResponse_BatchCheck struct {
	BatchCheck *v1.BatchCheckResponse `protobuf:"bytes,4,opt,name=batch_check,json=batchCheck,proto3,oneof"`
}

type TxResponse_Expand struct {
	Expand *v1.ExpandResponse `protobuf:"bytes,5,opt,name=expand,proto3,oneof"`
}

type TxResponse_ReadAuthorizationModels struct {
	ReadAuthorizationModels *v1.ReadAuthorizationModelsResponse `protobuf:"bytes,6,opt,name=read_authorization_models,json=readAuthorizationModels,proto3,oneof"`
}

type TxResponse_ReadAuthorizationModel struct {
	ReadAuthorizationModel *v1.ReadAuthorizationModelResponse `protobuf:"bytes,7,opt,name=read_authorization_model,json=readAuthorizationModel,proto3,oneof"`
}

type TxResponse_WriteAuthorizationModel struct {
	WriteAuthorizationModel *v1.WriteAuthorizationModelResponse `protobuf:"bytes,8,opt,name=write_authorization_model,json=writeAuthorizationModel,proto3,oneof"`
}

type TxResponse_WriteAssertions struct {
	WriteAssertions *v1.WriteAssertionsResponse `protobuf:"bytes,9,opt,name=write_assertions,json=writeAssertions,proto3,oneof"`
}

type TxResponse_ReadAssertions struct {
	ReadAssertions *v1.ReadAssertionsResponse `protobuf:"bytes,10,opt,name=read_assertions,json=readAssertions,proto3,oneof"`
}

type TxResponse_ReadChanges struct {
	ReadChanges *v1.ReadChangesResponse `protobuf:"bytes,11,opt,name=read_changes,json=readChanges,proto3,oneof"`
}

type TxResponse_CreateStore struct {
	CreateStore *v1.CreateStoreResponse `protobuf:"bytes,12,opt,name=create_store,json=createStore,proto3,oneof"`
}

type TxResponse_UpdateStore struct {
	UpdateStore *v1.UpdateStoreResponse `protobuf:"bytes,13,opt,name=update_store,json=updateStore,proto3,oneof"`
}

type TxResponse_DeleteStore struct {
	DeleteStore *v1.DeleteStoreResponse `protobuf:"bytes,14,opt,name=delete_store,json=deleteStore,proto3,oneof"`
}

type TxResponse_GetStore struct {
	GetStore *v1.GetStoreResponse `protobuf:"bytes,15,opt,name=get_store,json=getStore,proto3,oneof"`
}

type TxResponse_ListStores struct {
	ListStores *v1.ListStoresResponse `protobuf:"bytes,16,opt,name=list_stores,json=listStores,proto3,oneof"`
}

type TxResponse_ListObjects struct {
	ListObjects *v1.ListObjectsResponse `protobuf:"bytes,17,opt,name=list_objects,json=listObjects,proto3,oneof"`
}

type TxResponse_ListUsers struct {
	ListUsers *v1.ListUsersResponse `protobuf:"bytes,18,opt,name=list_users,json=listUsers,proto3,oneof"`
}

type TxResponse_Commit struct {
	Commit *CommitResponse `protobuf:"bytes,19,opt,name=commit,proto3,oneof"`
}

func (*TxResponse_Read) isTxResponse_Response() {}

func (*TxResponse_Write) isTxResponse_Response() {}

func (*TxResponse_Check) isTxResponse_Response() {}

func (*TxResponse_BatchCheck) isTxResponse_Response() {}

func (*TxResponse_Expand) isTxResponse_Response() {}

func (*TxResponse_ReadAuthorizationModels) isTxResponse_Response() {}

func (*TxResponse_ReadAuthorizationModel) isTxResponse_Response() {}

func (*TxResponse_WriteAuthorizationModel) isTxResponse_Response() {}

func (*TxResponse_WriteAssertions) isTxResponse_Response() {}

func (*TxResponse_ReadAssertions) isTxResponse_Response() {}

func (*TxResponse_ReadChanges) isTxResponse_Response() {}

func (*TxResponse_CreateStore) isTxResponse_Response() {}

func (*TxResponse_UpdateStore) isTxResponse_Response() {}

func (*TxResponse_DeleteStore) isTxResponse_Response() {}

func (*TxResponse_GetStore) isTxResponse_Response() {}

func (*TxResponse_ListStores) isTxResponse_Response() {}

func (*TxResponse_ListObjects) isTxResponse_Response() {}

func (*TxResponse_ListUsers) isTxResponse_Response() {}

func (*TxResponse_Commit) isTxResponse_Response() {}

type CommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x_pb_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_x_pb_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_x_pb_v1_service_proto_rawDescGZIP(), []int{2}
}

type CommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x_pb_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_x_pb_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_x_pb_v1_service_proto_rawDescGZIP(), []int{3}
}

var File_x_pb_v1_service_proto protoreflect.FileDescriptor

var file_x_pb_v1_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x78, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x78, 0x2e, 0x70,
	0x62, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x0a, 0x0a, 0x09, 0x54, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x30, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x68, 0x0a, 0x19, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65,
	0x61, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x65, 0x0a, 0x18, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x61, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x68, 0x0a, 0x19,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4f, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x43, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0a,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67,
	0x61, 0x2e, 0x78, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xeb, 0x0a, 0x0a,
	0x0a, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x41, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x69, 0x0a, 0x19, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65,
	0x61, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x66, 0x0a, 0x18, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x61, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x69, 0x0a,
	0x19, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x17, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x50, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x3b, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x78, 0x2e,
	0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x6c, 0x0a,
	0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x47, 0x41, 0x58, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x59, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x78, 0x2e, 0x70,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x67, 0x61, 0x2e, 0x78, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0xe7, 0x01, 0x0a, 0x1f,
	0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x78, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x23, 0x67, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2f, 0x78, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x31, 0x3b,
	0x70, 0x62, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x4c, 0x43, 0x4f, 0x58, 0x50, 0xaa, 0x02, 0x1b, 0x4c,
	0x69, 0x6e, 0x6b, 0x61, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x66,
	0x67, 0x61, 0x2e, 0x58, 0x2e, 0x50, 0x62, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1b, 0x4c, 0x69, 0x6e,
	0x6b, 0x61, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61,
	0x5c, 0x58, 0x5c, 0x50, 0x62, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x27, 0x4c, 0x69, 0x6e, 0x6b, 0x61,
	0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x5c, 0x58,
	0x5c, 0x50, 0x62, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x3a, 0x3a, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x3a, 0x3a, 0x58, 0x3a, 0x3a, 0x50,
	0x62, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_x_pb_v1_service_proto_rawDescOnce sync.Once
	file_x_pb_v1_service_proto_rawDescData = file_x_pb_v1_service_proto_rawDesc
)

func file_x_pb_v1_service_proto_rawDescGZIP() []byte {
	file_x_pb_v1_service_proto_rawDescOnce.Do(func() {
		file_x_pb_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_x_pb_v1_service_proto_rawDescData)
	})
	return file_x_pb_v1_service_proto_rawDescData
}

var file_x_pb_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_x_pb_v1_service_proto_goTypes = []interface{}{
	(*TxRequest)(nil),                          // 0: linka.cloud.openfga.x.pb.v1.TxRequest
	(*TxResponse)(nil),                         // 1: linka.cloud.openfga.x.pb.v1.TxResponse
	(*CommitRequest)(nil),                      // 2: linka.cloud.openfga.x.pb.v1.CommitRequest
	(*CommitResponse)(nil),                     // 3: linka.cloud.openfga.x.pb.v1.CommitResponse
	(*v1.ReadRequest)(nil),                     // 4: openfga.v1.ReadRequest
	(*v1.WriteRequest)(nil),                    // 5: openfga.v1.WriteRequest
	(*v1.CheckRequest)(nil),                    // 6: openfga.v1.CheckRequest
	(*v1.BatchCheckRequest)(nil),               // 7: openfga.v1.BatchCheckRequest
	(*v1.ExpandRequest)(nil),                   // 8: openfga.v1.ExpandRequest
	(*v1.ReadAuthorizationModelsRequest)(nil),  // 9: openfga.v1.ReadAuthorizationModelsRequest
	(*v1.ReadAuthorizationModelRequest)(nil),   // 10: openfga.v1.ReadAuthorizationModelRequest
	(*v1.WriteAuthorizationModelRequest)(nil),  // 11: openfga.v1.WriteAuthorizationModelRequest
	(*v1.WriteAssertionsRequest)(nil),          // 12: openfga.v1.WriteAssertionsRequest
	(*v1.ReadAssertionsRequest)(nil),           // 13: openfga.v1.ReadAssertionsRequest
	(*v1.ReadChangesRequest)(nil),              // 14: openfga.v1.ReadChangesRequest
	(*v1.CreateStoreRequest)(nil),              // 15: openfga.v1.CreateStoreRequest
	(*v1.UpdateStoreRequest)(nil),              // 16: openfga.v1.UpdateStoreRequest
	(*v1.DeleteStoreRequest)(nil),              // 17: openfga.v1.DeleteStoreRequest
	(*v1.GetStoreRequest)(nil),                 // 18: openfga.v1.GetStoreRequest
	(*v1.ListStoresRequest)(nil),               // 19: openfga.v1.ListStoresRequest
	(*v1.ListObjectsRequest)(nil),              // 20: openfga.v1.ListObjectsRequest
	(*v1.ListUsersRequest)(nil),                // 21: openfga.v1.ListUsersRequest
	(*v1.ReadResponse)(nil),                    // 22: openfga.v1.ReadResponse
	(*v1.WriteResponse)(nil),                   // 23: openfga.v1.WriteResponse
	(*v1.CheckResponse)(nil),                   // 24: openfga.v1.CheckResponse
	(*v1.BatchCheckResponse)(nil),              // 25: openfga.v1.BatchCheckResponse
	(*v1.ExpandResponse)(nil),                  // 26: openfga.v1.ExpandResponse
	(*v1.ReadAuthorizationModelsResponse)(nil), // 27: openfga.v1.ReadAuthorizationModelsResponse
	(*v1.ReadAuthorizationModelResponse)(nil),  // 28: openfga.v1.ReadAuthorizationModelResponse
	(*v1.WriteAuthorizationModelResponse)(nil), // 29: openfga.v1.WriteAuthorizationModelResponse
	(*v1.WriteAssertionsResponse)(nil),         // 30: openfga.v1.WriteAssertionsResponse
	(*v1.ReadAssertionsResponse)(nil),          // 31: openfga.v1.ReadAssertionsResponse
	(*v1.ReadChangesResponse)(nil),             // 32: openfga.v1.ReadChangesResponse
	(*v1.CreateStoreResponse)(nil),             // 33: openfga.v1.CreateStoreResponse
	(*v1.UpdateStoreResponse)(nil),             // 34: openfga.v1.UpdateStoreResponse
	(*v1.DeleteStoreResponse)(nil),             // 35: openfga.v1.DeleteStoreResponse
	(*v1.GetStoreResponse)(nil),                // 36: openfga.v1.GetStoreResponse
	(*v1.ListStoresResponse)(nil),              // 37: openfga.v1.ListStoresResponse
	(*v1.ListObjectsResponse)(nil),             // 38: openfga.v1.ListObjectsResponse
	(*v1.ListUsersResponse)(nil),               // 39: openfga.v1.ListUsersResponse
}
var file_x_pb_v1_service_proto_depIdxs = []int32{
	4,  // 0: linka.cloud.openfga.x.pb.v1.TxRequest.read:type_name -> openfga.v1.ReadRequest
	5,  // 1: linka.cloud.openfga.x.pb.v1.TxRequest.write:type_name -> openfga.v1.WriteRequest
	6,  // 2: linka.cloud.openfga.x.pb.v1.TxRequest.check:type_name -> openfga.v1.CheckRequest
	7,  // 3: linka.cloud.openfga.x.pb.v1.TxRequest.batch_check:type_name -> openfga.v1.BatchCheckRequest
	8,  // 4: linka.cloud.openfga.x.pb.v1.TxRequest.expand:type_name -> openfga.v1.ExpandRequest
	9,  // 5: linka.cloud.openfga.x.pb.v1.TxRequest.read_authorization_models:type_name -> openfga.v1.ReadAuthorizationModelsRequest
	10, // 6: linka.cloud.openfga.x.pb.v1.TxRequest.read_authorization_model:type_name -> openfga.v1.ReadAuthorizationModelRequest
	11, // 7: linka.cloud.openfga.x.pb.v1.TxRequest.write_authorization_model:type_name -> openfga.v1.WriteAuthorizationModelRequest
	12, // 8: linka.cloud.openfga.x.pb.v1.TxRequest.write_assertions:type_name -> openfga.v1.WriteAssertionsRequest
	13, // 9: linka.cloud.openfga.x.pb.v1.TxRequest.read_assertions:type_name -> openfga.v1.ReadAssertionsRequest
	14, // 10: linka.cloud.openfga.x.pb.v1.TxRequest.read_changes:type_name -> openfga.v1.ReadChangesRequest
	15, // 11: linka.cloud.openfga.x.pb.v1.TxRequest.create_store:type_name -> openfga.v1.CreateStoreRequest
	16, // 12: linka.cloud.openfga.x.pb.v1.TxRequest.update_store:type_name -> openfga.v1.UpdateStoreRequest
	17, // 13: linka.cloud.openfga.x.pb.v1.TxRequest.delete_store:type_name -> openfga.v1.DeleteStoreRequest
	18, // 14: linka.cloud.openfga.x.pb.v1.TxRequest.get_store:type_name -> openfga.v1.GetStoreRequest
	19, // 15: linka.cloud.openfga.x.pb.v1.TxRequest.list_stores:type_name -> openfga.v1.ListStoresRequest
	20, // 16: linka.cloud.openfga.x.pb.v1.TxRequest.list_objects:type_name -> openfga.v1.ListObjectsRequest
	21, // 17: linka.cloud.openfga.x.pb.v1.TxRequest.list_users:type_name -> openfga.v1.ListUsersRequest
	2,  // 18: linka.cloud.openfga.x.pb.v1.TxRequest.commit:type_name -> linka.cloud.openfga.x.pb.v1.CommitRequest
	22, // 19: linka.cloud.openfga.x.pb.v1.TxResponse.read:type_name -> openfga.v1.ReadResponse
	23, // 20: linka.cloud.openfga.x.pb.v1.TxResponse.write:type_name -> openfga.v1.WriteResponse
	24, // 21: linka.cloud.openfga.x.pb.v1.TxResponse.check:type_name -> openfga.v1.CheckResponse
	25, // 22: linka.cloud.openfga.x.pb.v1.TxResponse.batch_check:type_name -> openfga.v1.BatchCheckResponse
	26, // 23: linka.cloud.openfga.x.pb.v1.TxResponse.expand:type_name -> openfga.v1.ExpandResponse
	27, // 24: linka.cloud.openfga.x.pb.v1.TxResponse.read_authorization_models:type_name -> openfga.v1.ReadAuthorizationModelsResponse
	28, // 25: linka.cloud.openfga.x.pb.v1.TxResponse.read_authorization_model:type_name -> openfga.v1.ReadAuthorizationModelResponse
	29, // 26: linka.cloud.openfga.x.pb.v1.TxResponse.write_authorization_model:type_name -> openfga.v1.WriteAuthorizationModelResponse
	30, // 27: linka.cloud.openfga.x.pb.v1.TxResponse.write_assertions:type_name -> openfga.v1.WriteAssertionsResponse
	31, // 28: linka.cloud.openfga.x.pb.v1.TxResponse.read_assertions:type_name -> openfga.v1.ReadAssertionsResponse
	32, // 29: linka.cloud.openfga.x.pb.v1.TxResponse.read_changes:type_name -> openfga.v1.ReadChangesResponse
	33, // 30: linka.cloud.openfga.x.pb.v1.TxResponse.create_store:type_name -> openfga.v1.CreateStoreResponse
	34, // 31: linka.cloud.openfga.x.pb.v1.TxResponse.update_store:type_name -> openfga.v1.UpdateStoreResponse
	35, // 32: linka.cloud.openfga.x.pb.v1.TxResponse.delete_store:type_name -> openfga.v1.DeleteStoreResponse
	36, // 33: linka.cloud.openfga.x.pb.v1.TxResponse.get_store:type_name -> openfga.v1.GetStoreResponse
	37, // 34: linka.cloud.openfga.x.pb.v1.TxResponse.list_stores:type_name -> openfga.v1.ListStoresResponse
	38, // 35: linka.cloud.openfga.x.pb.v1.TxResponse.list_objects:type_name -> openfga.v1.ListObjectsResponse
	39, // 36: linka.cloud.openfga.x.pb.v1.TxResponse.list_users:type_name -> openfga.v1.ListUsersResponse
	3,  // 37: linka.cloud.openfga.x.pb.v1.TxResponse.commit:type_name -> linka.cloud.openfga.x.pb.v1.CommitResponse
	0,  // 38: linka.cloud.openfga.x.pb.v1.OpenFGAXService.Tx:input_type -> linka.cloud.openfga.x.pb.v1.TxRequest
	1,  // 39: linka.cloud.openfga.x.pb.v1.OpenFGAXService.Tx:output_type -> linka.cloud.openfga.x.pb.v1.TxResponse
	39, // [39:40] is the sub-list for method output_type
	38, // [38:39] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_x_pb_v1_service_proto_init() }
func file_x_pb_v1_service_proto_init() {
	if File_x_pb_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_x_pb_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x_pb_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x_pb_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x_pb_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_x_pb_v1_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TxRequest_Read)(nil),
		(*TxRequest_Write)(nil),
		(*TxRequest_Check)(nil),
		(*TxRequest_BatchCheck)(nil),
		(*TxRequest_Expand)(nil),
		(*TxRequest_ReadAuthorizationModels)(nil),
		(*TxRequest_ReadAuthorizationModel)(nil),
		(*TxRequest_WriteAuthorizationModel)(nil),
		(*TxRequest_WriteAssertions)(nil),
		(*TxRequest_ReadAssertions)(nil),
		(*TxRequest_ReadChanges)(nil),
		(*TxRequest_CreateStore)(nil),
		(*TxRequest_UpdateStore)(nil),
		(*TxRequest_DeleteStore)(nil),
		(*TxRequest_GetStore)(nil),
		(*TxRequest_ListStores)(nil),
		(*TxRequest_ListObjects)(nil),
		(*TxRequest_ListUsers)(nil),
		(*TxRequest_Commit)(nil),
	}
	file_x_pb_v1_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TxResponse_Read)(nil),
		(*TxResponse_Write)(nil),
		(*TxResponse_Check)(nil),
		(*TxResponse_BatchCheck)(nil),
		(*TxResponse_Expand)(nil),
		(*TxResponse_ReadAuthorizationModels)(nil),
		(*TxResponse_ReadAuthorizationModel)(nil),
		(*TxResponse_WriteAuthorizationModel)(nil),
		(*TxResponse_WriteAssertions)(nil),
		(*TxResponse_ReadAssertions)(nil),
		(*TxResponse_ReadChanges)(nil),
		(*TxResponse_CreateStore)(nil),
		(*TxResponse_UpdateStore)(nil),
		(*TxResponse_DeleteStore)(nil),
		(*TxResponse_GetStore)(nil),
		(*TxResponse_ListStores)(nil),
		(*TxResponse_ListObjects)(nil),
		(*TxResponse_ListUsers)(nil),
		(*TxResponse_Commit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_x_pb_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_x_pb_v1_service_proto_goTypes,
		DependencyIndexes: file_x_pb_v1_service_proto_depIdxs,
		MessageInfos:      file_x_pb_v1_service_proto_msgTypes,
	}.Build()
	File_x_pb_v1_service_proto = out.File
	file_x_pb_v1_service_proto_rawDesc = nil
	file_x_pb_v1_service_proto_goTypes = nil
	file_x_pb_v1_service_proto_depIdxs = nil
}
