// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: x/pb/v1/service.proto

package pbv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TxRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TxRequestMultiError, or nil
// if none found.
func (m *TxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReadOnly

	switch v := m.Request.(type) {
	case *TxRequest_Read:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRead()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "Read",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "Read",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRead()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "Read",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_Write:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWrite()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "Write",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "Write",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWrite()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "Write",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_Check:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCheck()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "Check",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "Check",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "Check",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_BatchCheck:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBatchCheck()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "BatchCheck",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "BatchCheck",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBatchCheck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "BatchCheck",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_Expand:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExpand()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "Expand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "Expand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpand()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "Expand",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_ReadAuthorizationModels:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReadAuthorizationModels()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ReadAuthorizationModels",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ReadAuthorizationModels",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReadAuthorizationModels()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "ReadAuthorizationModels",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_ReadAuthorizationModel:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReadAuthorizationModel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ReadAuthorizationModel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ReadAuthorizationModel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReadAuthorizationModel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "ReadAuthorizationModel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_WriteAuthorizationModel:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWriteAuthorizationModel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "WriteAuthorizationModel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "WriteAuthorizationModel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWriteAuthorizationModel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "WriteAuthorizationModel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_WriteAssertions:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWriteAssertions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "WriteAssertions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "WriteAssertions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWriteAssertions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "WriteAssertions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_ReadAssertions:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReadAssertions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ReadAssertions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ReadAssertions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReadAssertions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "ReadAssertions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_ReadChanges:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReadChanges()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ReadChanges",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ReadChanges",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReadChanges()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "ReadChanges",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_CreateStore:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreateStore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "CreateStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "CreateStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateStore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "CreateStore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_UpdateStore:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUpdateStore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "UpdateStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "UpdateStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateStore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "UpdateStore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_DeleteStore:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeleteStore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "DeleteStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "DeleteStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleteStore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "DeleteStore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_GetStore:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetStore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "GetStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "GetStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetStore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "GetStore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_ListStores:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListStores()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ListStores",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ListStores",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListStores()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "ListStores",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_ListObjects:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListObjects()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ListObjects",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ListObjects",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListObjects()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "ListObjects",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_ListUsers:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListUsers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ListUsers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "ListUsers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListUsers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "ListUsers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_Commit:
		if v == nil {
			err := TxRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCommit()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "Commit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxRequestValidationError{
						field:  "Commit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCommit()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TxRequestMultiError(errors)
	}

	return nil
}

// TxRequestMultiError is an error wrapping multiple validation errors returned
// by TxRequest.ValidateAll() if the designated constraints aren't met.
type TxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxRequestMultiError) AllErrors() []error { return m }

// TxRequestValidationError is the validation error returned by
// TxRequest.Validate if the designated constraints aren't met.
type TxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxRequestValidationError) ErrorName() string { return "TxRequestValidationError" }

// Error satisfies the builtin error interface
func (e TxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxRequestValidationError{}

// Validate checks the field values on TxResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TxResponseMultiError, or
// nil if none found.
func (m *TxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Response.(type) {
	case *TxResponse_Read:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRead()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "Read",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "Read",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRead()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "Read",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_Write:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWrite()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "Write",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "Write",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWrite()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "Write",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_Check:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCheck()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "Check",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "Check",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "Check",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_BatchCheck:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBatchCheck()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "BatchCheck",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "BatchCheck",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBatchCheck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "BatchCheck",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_Expand:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExpand()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "Expand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "Expand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpand()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "Expand",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_ReadAuthorizationModels:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReadAuthorizationModels()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ReadAuthorizationModels",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ReadAuthorizationModels",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReadAuthorizationModels()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "ReadAuthorizationModels",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_ReadAuthorizationModel:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReadAuthorizationModel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ReadAuthorizationModel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ReadAuthorizationModel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReadAuthorizationModel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "ReadAuthorizationModel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_WriteAuthorizationModel:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWriteAuthorizationModel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "WriteAuthorizationModel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "WriteAuthorizationModel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWriteAuthorizationModel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "WriteAuthorizationModel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_WriteAssertions:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWriteAssertions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "WriteAssertions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "WriteAssertions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWriteAssertions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "WriteAssertions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_ReadAssertions:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReadAssertions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ReadAssertions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ReadAssertions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReadAssertions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "ReadAssertions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_ReadChanges:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReadChanges()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ReadChanges",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ReadChanges",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReadChanges()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "ReadChanges",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_CreateStore:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreateStore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "CreateStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "CreateStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateStore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "CreateStore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_UpdateStore:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUpdateStore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "UpdateStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "UpdateStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateStore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "UpdateStore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_DeleteStore:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeleteStore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "DeleteStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "DeleteStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleteStore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "DeleteStore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_GetStore:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetStore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "GetStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "GetStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetStore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "GetStore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_ListStores:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListStores()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ListStores",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ListStores",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListStores()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "ListStores",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_ListObjects:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListObjects()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ListObjects",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ListObjects",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListObjects()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "ListObjects",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_ListUsers:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListUsers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ListUsers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "ListUsers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListUsers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "ListUsers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_Commit:
		if v == nil {
			err := TxResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCommit()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "Commit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxResponseValidationError{
						field:  "Commit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCommit()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TxResponseMultiError(errors)
	}

	return nil
}

// TxResponseMultiError is an error wrapping multiple validation errors
// returned by TxResponse.ValidateAll() if the designated constraints aren't met.
type TxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxResponseMultiError) AllErrors() []error { return m }

// TxResponseValidationError is the validation error returned by
// TxResponse.Validate if the designated constraints aren't met.
type TxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxResponseValidationError) ErrorName() string { return "TxResponseValidationError" }

// Error satisfies the builtin error interface
func (e TxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxResponseValidationError{}

// Validate checks the field values on CommitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommitRequestMultiError, or
// nil if none found.
func (m *CommitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CommitRequestMultiError(errors)
	}

	return nil
}

// CommitRequestMultiError is an error wrapping multiple validation errors
// returned by CommitRequest.ValidateAll() if the designated constraints
// aren't met.
type CommitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitRequestMultiError) AllErrors() []error { return m }

// CommitRequestValidationError is the validation error returned by
// CommitRequest.Validate if the designated constraints aren't met.
type CommitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitRequestValidationError) ErrorName() string { return "CommitRequestValidationError" }

// Error satisfies the builtin error interface
func (e CommitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitRequestValidationError{}

// Validate checks the field values on CommitResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommitResponseMultiError,
// or nil if none found.
func (m *CommitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CommitResponseMultiError(errors)
	}

	return nil
}

// CommitResponseMultiError is an error wrapping multiple validation errors
// returned by CommitResponse.ValidateAll() if the designated constraints
// aren't met.
type CommitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitResponseMultiError) AllErrors() []error { return m }

// CommitResponseValidationError is the validation error returned by
// CommitResponse.Validate if the designated constraints aren't met.
type CommitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitResponseValidationError) ErrorName() string { return "CommitResponseValidationError" }

// Error satisfies the builtin error interface
func (e CommitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitResponseValidationError{}
